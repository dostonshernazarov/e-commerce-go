// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package storage

import (
	"context"
	"database/sql"
)

const createComment = `-- name: CreateComment :exec
INSERT INTO  comments (user_id, post_id, message,comment_like) 
VALUES ($1, $2, $3, $4)
`

type CreateCommentParams struct {
	UserID      int32
	PostID      int32
	Message     string
	CommentLike sql.NullInt32
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) error {
	_, err := q.db.ExecContext(ctx, createComment,
		arg.UserID,
		arg.PostID,
		arg.Message,
		arg.CommentLike,
	)
	return err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE comment_id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, commentID int32) error {
	_, err := q.db.ExecContext(ctx, deleteComment, commentID)
	return err
}

const getComment = `-- name: GetComment :one
SELECT comment_id, post_id, user_id, message, comment_like, created_at, updated_at FROM comments
WHERE comment_id = $1 AND  user_id=$2 LIMIT 1
`

type GetCommentParams struct {
	CommentID int32
	UserID    int32
}

func (q *Queries) GetComment(ctx context.Context, arg GetCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, arg.CommentID, arg.UserID)
	var i Comment
	err := row.Scan(
		&i.CommentID,
		&i.PostID,
		&i.UserID,
		&i.Message,
		&i.CommentLike,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments
  set 
    message= $1,
    comment_like = $2
WHERE comment_id = $3 AND user_id=$4
returning message,comment_like
`

type UpdateCommentParams struct {
	Message     string
	CommentLike sql.NullInt32
	CommentID   int32
	UserID      int32
}

type UpdateCommentRow struct {
	Message     string
	CommentLike sql.NullInt32
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (UpdateCommentRow, error) {
	row := q.db.QueryRowContext(ctx, updateComment,
		arg.Message,
		arg.CommentLike,
		arg.CommentID,
		arg.UserID,
	)
	var i UpdateCommentRow
	err := row.Scan(&i.Message, &i.CommentLike)
	return i, err
}
